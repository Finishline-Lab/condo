@{/*

exec
    Executes a command at the command line.

cmd=''
    Required. The command line tool to execute.

exec_args=''
    Additional arguments to send to the command line tool.

exec_path=''
    The working directory of the command line tool.

exec_wait='true'
    A value indicating whether or not to wait for exit.

exec_quiet='$(Build.Log.Quiet)'
    A value indicating whether or not to execute the command quietly.

exec_secure='false'
    A value indicating wehther or not to avoid printing output for public builds.

*/}

use namespace = 'System'
use namespace = 'System.IO'

use import = 'Condo.Build'

default exec_cmd          = ''
default exec_args         = ''
default exec_path         = '${ Directory.GetCurrentDirectory() }'
default exec_output_path  = ''
default exec_wait         = '${ true }'
default exec_quiet        = '${ Build.Log.Quiet }'
default exec_secure       = '${ false }' type='bool'
default exec_retries      = '${ 1 }' type='int'

log log_header='exec'
log log_line='-'

@{
    if (string.IsNullOrEmpty(exec_cmd))
    {
        throw new ArgumentException("A command must be specified in order for the command to execute.", "exec_cmd");
    }

    exec_cmd = exec_cmd.Trim();

    if (!string.IsNullOrEmpty(exec_args))
    {
        exec_args = exec_args.Trim();
    }
}

log log_name='command'      log_value='${ exec_cmd }'
log log_name='arguments'    log_value='${ exec_args }'          log_secure='${ exec_secure }'
log log_name='path'         log_value='${ exec_path }'
log log_name='output path'  log_value='${ exec_output_path }'
log log_name='wait'         log_value='${ exec_wait }'
log log_name='quiet'        log_value='${ exec_quiet }'
log log_name='retries'      log_value='${ exec_retries }'
log log_line='-'

@{
    // define a variable to retain the exit code
    int code;
    string result;

    // attempt to execute the command
    if(!Build.TryExecute(exec_cmd, out code, out result, exec_args, exec_path, exec_quiet, exec_wait, exec_retries))
    {
        // throw a new exception
        throw new Exception(string.Format("The command {0} with args {1} failed with exit code {2}. The output was {3}.", exec_cmd, exec_args, code, exec_secure && Build.Log.Secure ? "<secured>" : result));
    }

    // determine if an output path was specified
    if (!string.IsNullOrEmpty(exec_output_path))
    {
        // write all text to the specified output path
        File.WriteAllText(exec_output_path, result);
    }
}

log log_line='-'