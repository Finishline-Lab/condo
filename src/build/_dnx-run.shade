@{/*

dnx-run
    Executes the command for a project based on the current platform.

dnx_run_project=''
    Required. The project.json or the path containing the project.json that should be executed.

dnx_run_cmd=''
    The command that should be executed.

    NOTE: this is automatically discovered based on the current platform if not specified.

dnx_run_runtime=''
    The runtime to use when executing dnx. This argument is passed in the raw to 'dnvm use.'

dnx_run_options='' (Environment Variable: DNX_RUN_OPTIONS)
    Additional options to pass to DNX when executing the specified command.

dnx_run_quiet='Build.Log.Quiet'
    A value indicating whether or not to avoid printing output.

*/}

use namespace = 'System'
use namespace = 'System.IO'

use import = 'Condo.Build'

default dnx_run_project = ''
default dnx_run_cmd     = ''
default dnx_run_runtime = ''
default dnx_run_options = '${ Build.Get("DNX_RUN_OPTIONS") }'
default dnx_run_quiet   = '${ Build.Log.Quiet }'

log log_header='dnx-run'
log log_line='-'

var dnx_run_path = ''
var dnx_run_exec_path = ''

@{
    // determine if a project is specified
    if (string.IsNullOrEmpty(dnx_run_project))
    {
        // throw an exception
        throw new ArgumentException("dnx-run: a project must be specified.", "dnx_run_project");
    }

    dnx_run_path = File.Exists(dnx_run_project) ? dnx_run_project : Path.Combine(dnx_run_project, "project.json");

    // determine if the file still does not exist
    if (!File.Exists(dnx_run_path))
    {
        // throw an argument exception
        throw new ArgumentException("dnx-run: the specified project does not exist.", "dnx_run_project");
    }

    // determine if the command is specified
    if (string.IsNullOrEmpty(dnx_run_cmd))
    {
        // always use web for now
        dnx_run_cmd = "web";
    }

    // trim the arguments
    dnx_run_path = dnx_run_path.Trim();
    dnx_run_cmd = dnx_run_cmd.Trim();
    dnx_run_runtime = dnx_run_runtime.Trim();
    dnx_run_options = dnx_run_options.Trim();

    // get the running path
    dnx_run_exec_path = Path.GetDirectoryName(dnx_run_path);
}

log log_name='project'  log_value='${ dnx_run_path }'
log log_name='command'  log_value='${ dnx_run_cmd }'
log log_name='runtime'  log_value='${ dnx_run_runtime }'
log log_name='options'  log_value='${ dnx_run_options }'
log log_name='quiet'    log_value='${ dnx_run_quiet }'
log log_line='-'

@{
    var js = new JavaScriptSerializer();

    var dnx_run_text = File.ReadAllText(dnx_run_path);
    var dnx_run_json = js.DeserializeObject(dnx_run_text) as Dictionary<string, object>;

    object dnx_run_cmds_obj;

    var dnx_run_cmds = dnx_run_json.TryGetValue("commands", out dnx_run_cmds_obj)
        ? dnx_run_cmds_obj as Dictionary<string, object>
        : new Dictionary<string, object>();

    object dnx_run_cmd_obj;

    var dnx_run_cmd_exists = dnx_run_cmds.TryGetValue(dnx_run_cmd, out dnx_run_cmd_obj);
}

log warn='dnx-run: command ${ dnx_run_cmd } does not exist for project ${ dnx_run_project }' if='!dnx_run_cmd_exists'
dnx dnx_args='${ dnx_run_cmd }' dnx_options='${ dnx_run_options }' dnx_path='${ dnx_run_exec_path }' dnx_runtime='${ dnx_run_runtime }' dnx_quiet='${ dnx_run_quiet }' dnx_wait='${ false }' if='dnx_run_cmd_exists'