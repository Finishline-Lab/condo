@{/*

dnu-pack
    Executes a dnu package manager command to pack all available projects.

dnu_pack_path='$(working_path)'
    Required. The path in which to execute the dnu command line tool.

dnu_pack_project=''
    The project to build using the dnu command line tool.

dnu_pack_framework=''
    A semi-colon (;) delimited list of target frameworks to build against.

dnu_pack_configuration='$(configuration)'
    A semi-colon (;) delimited list of configurations to build.

dnu_pack_options='' (Environment Variable: DNU_PACK_OPTIONS)
    Additional options to include when executing the dnu command line tool for pack operations.

dnu_pack_output_path='$(target_path)/build'
    The path in which to store the resulting packages (the name of the project will always be appended).

base_path='$(CurrentDirectory)'
    The base path in which to execute the dnu command line tool.

working_path='$(base_path)'
    The working path in which to execute the dnu command line tool.

target_path='$(working_path)/artifacts'
    The target path for build artifacts.

configuration=''
    The default configurations to use if no configurations are specified.

*/}

use namespace = 'System'
use namespace = 'System.IO'

use import = 'Condo.Build'

default configuration           = ''

default base_path               = '${ Directory.GetCurrentDirectory() }'
default working_path            = '${ base_path }'
default target_path             = '${ Path.Combine(base_path, "artifacts") }'
default dnu_pack_path           = '${ working_path }'
default dnu_pack_output_path    = '${ Path.Combine(target_path, "build") }'

default dnu_pack_project        = ''
default dnu_pack_framework      = ''
default dnu_pack_configuration  = '${ configuration }'
default dnu_pack_options        = '${ Build.Variable("DNU_PACK_OPTIONS") }'

@{
    if (string.IsNullOrEmpty(dnu_pack_path))
    {
        throw new ArgumentException("dnu-pack: project path must be specified.", "dnu_pack_path");
    }

    if (!string.IsNullOrEmpty(dnu_pack_project))
    {
        dnu_pack_project = dnu_pack_project.Trim();
    }

    if (!string.IsNullOrEmpty(dnu_pack_options))
    {
        dnu_pack_options = dnu_pack_options.Trim();
    }

    var dnu_pack_name = File.Exists(dnu_pack_path)
        ? Path.GetDirectoryName(dnu_pack_path)
        : Path.GetFileName(dnu_pack_path);

    dnu_pack_output_path = Path.Combine(dnu_pack_output_path, dnu_pack_name);
}

log verbose='-dnu-pack'
log verbose='--path         : ${ dnu_pack_path }'
log verbose='--project      : ${ dnu_pack_project }' if='!string.IsNullOrEmpty(dnu_pack_project)'
log verbose='--framework    : ${ dnu_pack_framework }' if='!string.IsNullOrEmpty(dnu_pack_framework)'
log verbose='--configuration: ${ dnu_pack_configuration }' if='!string.IsNullOrEmpty(dnu_pack_configuration)'
log verbose='--options      : ${ dnu_pack_options }' if='!string.IsNullOrEmpty(dnu_pack_options)'
log verbose='--output path  : ${ dnu_pack_output_path }' if='!string.IsNullOrEmpty(dnu_pack_output_path)'

@{
    if (!string.IsNullOrEmpty(dnu_pack_output_path))
    {
        dnu_pack_options += string.Format(@" --out ""{0}""", dnu_pack_output_path);
    }

    if (!string.IsNullOrEmpty(dnu_pack_framework))
    {
        dnu_pack_options += string.Format(@" --framework ""{0}""", dnu_pack_framework);
    }

    if (!string.IsNullOrEmpty(dnu_pack_configuration))
    {
        dnu_pack_options += string.Format(@" --configuration ""{0}""", dnu_pack_configuration);
    }

    dnu_pack_options = dnu_pack_options.Trim();
}

dnu dnu_args='pack ${ dnu_pack_project }' dnu_options='${ dnu_pack_options }' dnu_path='${ dnu_pack_path }'