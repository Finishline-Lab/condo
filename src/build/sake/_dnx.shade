@{/*

dnx
    Executes the dnx command line tool.

dnx_args=''
    The arguments for the dnx command.

dnx_version=''
    The version of dnx to use when executing the command.

dnx_options='' (Environment Variable: DNX_OPTIONS)
    Additional options to use when executing the dnx command.

dnx_path='$(working_path)'
    The path in which to execute dnx.

base_path='$(CurrentDirectory)'
    The base path in which to execute dnx.

working_path='$(base_path)'
    The working path in which to execute dnx.

dnx_wait='true'
    A value indicating whether or not to wait for exit.

dnx_quiet='$(Build.Log.Quiet)'
    A value indicating whether or not to avoid printing output.

*/}

use import = 'Condo.Build'

default base_path       = '${ Directory.GetCurrentDirectory() }'
default working_path    = '${ base_path }'
default dnvm_path       = ''

default dnx_args        = ''
default dnx_runtime     = ''
default dnx_path        = '${ working_path }'
default dnx_options     = '${ Build.Get("DNX_OPTIONS") }'
default dnx_wait        = '${ true }'
default dnx_quiet       = '${ Build.Log.Quiet }'

log log_header='dnx'
log log_line='-'

var dnx_exec_cmd        = 'dnx'
var dnx_where_cmd       = '${ Build.Unix ? "which" : "where" }'
var dnx_dnvm_cmd        = '${ Build.Unix ? "dnvm.sh" : "dnvm.cmd" }'

@{
    if (string.IsNullOrEmpty(dnx_args))
    {
        throw new ArgumentException("dnx: arguments must be specified.", "dnx_args");
    }

    dnx_args = dnx_args.Trim();

    if (!string.IsNullOrEmpty(dnx_options))
    {
        dnx_options = dnx_options.Trim();
    }
}

log log_name='arguments'    log_value='${ dnx_args }'
log log_name='options'      log_value='${ dnx_options }'
log log_name='path'         log_value='${ dnx_path }'
log log_name='wait'         log_value='${ dnx_wait }'
log log_name='quiet'        log_value='${ dnx_quiet }'
log log_line='-'

@{
    if (!string.IsNullOrEmpty(dnx_runtime))
    {
        if (string.IsNullOrEmpty(dnvm_path))
        {
            Build.TryExecute(dnx_where_cmd, out dnvm_path, dnx_dnvm_cmd);
        }

        if (Build.Unix)
        {
            dnx_args = string.Format(@"bash -c 'source ""{0}"" && dnvm use {1} && {2} {3} {4}'", dnvm_path, dnx_runtime, dnx_exec_cmd, dnx_args, dnx_options);
            dnx_exec_cmd = "/usr/bin/env";
        }
        else
        {
            dnx_args = string.Format(@"use {0} && {1} {2} {3}", dnx_runtime, dnx_args, dnx_options);
            dnx_exec_cmd = dnvm_path;
        }

        dnx_options = string.Empty;
    }
}

exec exec_cmd='${ dnx_exec_cmd }' exec_args='${ dnx_args } ${ dnx_options }' exec_path='${ dnx_path }' exec_wait='${ dnx_wait }' exec_quiet='${ dnx_quiet }'