@{/*

dnx
    Executes the dnx command line tool.

dnx_args=''
    The arguments for the dnx command.

dnx_options='' (Environment Variable: dnx_options)
    Additional options to use when executing the dnx command.

dnx_path='$(working_path)'
    The path in which to execute dnx.

base_path='$(CurrentDirectory)'
    The base path in which to execute dnx.

working_path='$(base_path)'
    The working path in which to execute dnx.

*/}

default dnx_args        = ''
default base_path       = '${ Directory.GetCurrentDirectory() }'
default working_path    = '${ base_path }'
default dnx_path        = '${ working_path }'
default dnx_options     = '${ Build.Variable("dnx_options") }'

log verbose='-dnx'
log verbose='--arguments    : ${ dnx_args }'
log verbose='--options      : ${ dnx_options}' if='!string.IsNullOrEmpty(dnx_options)'
log verbose='--path         : ${ dnx_path }'

@{
    if (string.IsNullOrEmpty(dnx_args))
    {
        throw new ArgumentException("dnx: arguments must be specified.", "dnx_args");
    }

    dnx_args = dnx_args.Trim();
    
    if (!string.IsNullOrEmpty(dnx_options))
    {
        dnx_options = dnx_options.Trim();
    }
}

exec exec_cmd='dnvm' exec_args='run ${ dnx_args } ${ dnx_options }' exec_path='${ dnx_path }' if='!Build.Unix'
exec exec_cmd='dnx' exec_args='${ dnx_args } ${ dnx_options }' exec_path='${ dnx_path }' if='Build.Unix'