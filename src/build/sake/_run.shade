@{/*

run
    Executes the run command line tool.

run_args=''
    The arguments for the run command.

run_options='' (Environment Variable: RUN_OPTIONS)
    Additional options to use when executing the run command.

run_path='$(working_path)'
    The path in which to execute run.

base_path='$(CurrentDirectory)'
    The base path in which to execute run.

working_path='$(base_path)'
    The working path in which to execute run.

run_wait='true'
    A value indicating whether or not to wait for exit.

run_quiet='$(Build.Log.Quiet)'
    A value indicating whether or not to avoid printing output.

run_secure='false'
    A value indicating whether or not to avoid printing secure information for public builds.

*/}

use import = 'Condo.Build'

default base_path       = '${ Directory.GetCurrentDirectory() }'
default working_path    = '${ base_path }'

default run_args        = ''
default run_path        = '${ working_path }'
default run_options     = '${ Build.Get("RUN_OPTIONS") }'
default run_wait        = '${ true }'
default run_quiet       = '${ Build.Log.Quiet }'
default run_secure      = '${ false }' type='bool'
default run_retries     = '${ 1 }' type='int'
log log_header='run'
log log_line='-'

@{
    if (string.IsNullOrEmpty(run_args))
    {
        throw new ArgumentException("run: arguments must be specified.", "run_args");
    }

    run_args = run_args.Trim();

    if (!string.IsNullOrEmpty(run_options))
    {
        run_options = run_options.Trim();
    }
}

log log_name='arguments'    log_value='${ run_args }'       log_secure='${ run_secure }'
log log_name='options'      log_value='${ run_options }'    log_secure='${ run_secure }'
log log_name='path'         log_value='${ run_path }'
log log_name='wait'         log_value='${ run_wait }'
log log_name='quiet'        log_value='${ run_quiet }'
log log_name='retries'      log_value='${ run_retries }'
log log_line='-'

exec exec_cmd='mono' exec_args='${ run_args } ${ run_options }' exec_path='${ run_path }' exec_wait='${ run_wait }' exec_quiet='${ run_quiet }' exec_secure='${ run_secure }' exec_retries='${ run_retries }' if='Build.Unix'
exec exec_cmd='${ run_args }' exec_args='${ run_options }' exec_path='${ run_path }' exec_wait = '${ run_wait }' exec_quiet='${ run_quiet }' exec_secure='${ run_secure }' exec_retries='${ run_retries }' if='!Build.Unix'