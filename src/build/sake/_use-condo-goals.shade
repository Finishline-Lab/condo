use namespace = 'System'
use namespace = 'System.IO'

default base_path           = '${ Directory.GetCurrentDirectory() }'
default target_path         = '${ Path.Combine(base_path, "artifacts") }'
default bin_path            = '${ Path.Combine(base_path, "bin") }'
default src_path            = '${ Path.Combine(base_path, "src") }'
default test_path           = '${ Path.Combine(base_path, "test") }'
default working_path        = '${ base_path }'
default appdata_path        = '${ Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) }'

default target_build_path   = '${ Path.Combine(target_path, "build") }'
default target_test_path    = '${ Path.Combine(target_path, "test") }'
default target_package_path = '${ Path.Combine(target_path, "packages") }'

default configuration   = '${ Build.Variable("Configuration") }'
default version         = '${ Build.Variable("BUILD_VERSION") }'

default Quiet='${ false }'
default Verbose='${ false }'

@{
    // determine if the version was specified
    if (string.IsNullOrEmpty(version))
    {
        // set the version
        version = "0.0.0";
    }

    // set the log instance on the helper class
    Build.Log = this.Log;

    if (string.IsNullOrEmpty(configuration))
    {
        configuration = "Debug";
        Build.Variable("Configuration", configuration);
    }
}

#--quiet @{
    Quiet = true;

    Build.Variable("npm_install_options", "--quiet", append: true);
}

#-q .--quiet

#print-properties
    log verbose='Paths'
    log verbose='-------------------------------------------------------------'
    log verbose='Base Path             : ${ base_path }'
    log verbose='Source Path           : ${ src_path }'
    log verbose='Test Path             : ${ test_path }'
    log verbose='Working Path          : ${ working_path }'
    log verbose='Bin Path              : ${ bin_path }'
    log verbose='Target Path           : ${ target_path }'
    log verbose='Build Results Path    : ${ target_build_path }'
    log verbose='Test Results Path     : ${ target_test_path }'
    log verbose='NuGet Packages Path   : ${ target_package_path }'
    log verbose='-------------------------------------------------------------'

    log verbose='Options'
    log verbose='-------------------------------------------------------------'
    log verbose='Configuration         : ${ configuration }'
    log verbose='Version               : ${ version }'
    log verbose='Date Time (UTC)       : ${ AssemblyInfo.BuildDateUtc }'
    log verbose='-------------------------------------------------------------'

#clean-bin description='Cleans the bin directory.'
    rimraf rimraf_path='${ bin_path }' if='Directory.Exists(bin_path)'

#clean-npm-modules description='Cleans any installed NPM modules.'
    var paths = '${ Build.GetPathsContaining(base_path, "package.json").Select(p => Path.Combine(p, "node_modules")).Where(p => Directory.Exists(p)) }'
    rimraf each='var rimraf_path in paths'

#clean-bower-components description='Cleans any installed bower components.'
    var paths = '${ Build.GetPathsContaining(base_path, "package.json").Select(p => Path.Combine(p, "bower_components")).Where(p => Directory.Exists(p)) }'
    rimraf each='var rimraf_path in paths'

#clean-artifacts target='clean' if='Directory.Exists(target_path)' description='Cleans the artifacts directory from the working directory.' @{
    var path = new DirectoryInfo(target_path);
    path.Attributes &= ~FileAttributes.ReadOnly;

    foreach (var info in path.GetFileSystemInfos("*", SearchOption.AllDirectories))
    {
        info.Attributes &= ~FileAttributes.ReadOnly;
    }

    path.Delete(true);
}

#clean-build target='clean' if='Directory.Exists(src_path)' description='Clean the build artifactes from each project within the working directory.'
    var paths = '${ Build.GetPathsContaining(base_path, "project.json") }'
    clean each='var clean_path in paths'

#clean-all .clean-bower-components .clean-npm-modules .clean-bin .clean description='Clean everything in preparation for `git clean`.'

#restore-npm-modules description='Restores all NPM modules. This will install NodeJS and NPM if not already found on the system.'
    var paths = '${ Build.GetPathsContaining(base_path, "package.json") }'
    npm npm_args='install ${ Build.Variable("npm_install_options") }' each='var npm_path in paths'

#restore-bower-components description='Restores all Bower components. This will install the Bower node module if not already found on the system.'
    var paths = '${ Build.GetPathsContaining(base_path, "bower.json") }'
    bower bower_args='install ${ Build.Variable("bower_install_options") }' each='var bower_path in paths'

#restore-project-packages description='Restores all NuGet packages (project.json).'
    var paths = '${ Build.GetPathsContaining(base_path, "project.json") }'
    dnu-restore each='var dnu_restore_path in paths'

#restore-nuget-packages description='Restores all NuGet packages (packages.config).'
    var paths = '${ Build.GetPathsContaining(base_path, "packages.config") }'
    nuget-restore each='var nuget_restore_path in paths'

#restore-packages .restore-project-packages .restore-nuget-packages .restore-npm-modules .restore-bower-components target='restore' description='Restores all NuGet packages, Bower components, and NPM modules.'

#initialize-grunt description='Initializes the project by executing the default grunt task. This will install the grunt node module if not already found on the system.'
    var paths = '${ Build.GetPathsContaining(base_path, "gruntfile.js") }'
    grunt each='var grunt_path in paths'

#initialize-gulp description='Initializes the project by executing the default gulp task. This will install the gulp node module if not already found on the system.'
    var paths = '${ Build.GetPathsContaining(base_path, "gulpfile.js") }'
    gulp each='var gulp_path in paths'

#initialize-info
    var paths = '${ Build.GetPathsContaining(base_path, "project.json") }'
    info each='var info_path in paths'

#initialize-all .initialize-info .initialize-grunt .initialize-gulp target='initialize' description='Initializes all initialization targets.'

#compile-dnx target='compile' description='Compiles and packages all projects found within the source directory.'
    var paths = '${ Build.GetPathsContaining(src_path, "project.json") }'
    dnu-pack dnu_pack_output_path='${ target_build_path }' each='var dnu_pack_path in paths'

#pack-nuget-packages target='package' description='Packages NuGet specifications found within the source directory.'
    var specs = '${ Build.GetPaths(src_path, "*.nuspec") }'
    nuget-pack nuget_pack_output_path='${ target_package_path }' each='var nuget_pack_path in specs'

#push-nuget-packages-local target='post-package' description='Pushes NuGet packages to the local feed for development purposes.'
    copy copy_src_path='${ target_package_path }' copy_dst_path='${ Path.Combine(appdata_path, "NuGet", "packages") }' copy_include="**/*.nupkg" copy_overwrite='${ true }'

#push-nuget-packages target='push' description='Pushes NuGet packages to the a NuGet feed.'
    var pkgs = '${ Build.GetPaths(target_package_path, "*.nupkg") }'
    nuget-push each='var nuget_push_args in pkgs'