@{/*

nuget
    Executes the nuget package manager command.

nuget_args=''
    Required. The arguments to pass to the nuget package manager command line tool.

nuget_options='' (Environment Variable: NUGET_OPTIONS)
    Additional options to include when executuing the nuget package manager command line tool.

nuget_path='$(working_path)'
    The path in which to execute the nuget package manager command line tool.

base_path='$(CurrentDirectory)'
    The base path in which to execute the nuget package manager command line tool.

working_path='$(base_path)'
    The working path in which to execute the nuget package manager command line tool.

nuget_download_path='$(base_path)/.nuget'
    The path in which to install the nuget executable if it is not already available.

*/}

use namespace = 'System'
use namespace = 'System.IO'

use import = 'Condo.Build'

default base_path           = '${ Directory.GetCurrentDirectory() }'
default working_path        = '${ base_path }'
default nuget_path          = '${ working_path }'
default nuget_download_path = '${ Path.Combine(base_path, ".nuget") }'

default nuget_args          = 'restore'
default nuget_options       = '${ Build.Get("NUGET_OPTIONS") }'

var nuget_cmd               = '${ Path.Combine(nuget_download_path, "nuget.exe") }'

default Quiet               = '${ false }'

nuget-download once='nuget-download'

@{
    if (string.IsNullOrEmpty(nuget_args))
    {
        throw new ArgumentException("nuget: arguments must be specified when executing the nuget command line tool.", "nuget_args");
    }

    nuget_args = nuget_args.Trim();

    if (Quiet)
    {
        nuget_options += " -Verbosity quiet";
    }

    if (!string.IsNullOrEmpty(nuget_options))
    {
        nuget_options = nuget_options.Trim();
    }
}

log verbose='-nuget'
log verbose='--path         : ${ nuget_path }'
log verbose='--arguments    : ${ nuget_args }'
log verbose='--options      : ${ nuget_options }' if='!string.IsNullOrEmpty(nuget_options)'

dnx dnx_args='"${ nuget_cmd }"' dnx_options = '${ nuget_args } ${ nuget_options }' dnx_path='${ nuget_path }'