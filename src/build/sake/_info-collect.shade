use namespace = 'System'

use import = 'Condo.AssemblyInfo'

default base_path               = '${ Directory.GetCurrentDirectory() }'
default working_path            = '${ base_path }'

- AssemblyInfo.AssemblyVersion  = Build.Variable("BUILD_VERSION");
- AssemblyInfo.Branch           = Build.Variable("BUILD_SOURCEBRANCH");
- AssemblyInfo.CommitId         = Build.Variable("BUILD_SOURCEVERSION");
- AssemblyInfo.RepositoryUri    = Build.Variable("BUILD_REPOSITORY_URI");
- AssemblyInfo.BuildUri         = Build.Variable("BUILD_BUILDURI");
- AssemblyInfo.TeamUri          = Build.Variable("SYSTEM_TEAMFOUNDATIONCOLLECTIONURI");
- AssemblyInfo.BuiltBy          = Build.Variable("BUILD_REQUESTEDFOR");
- AssemblyInfo.BuiltOn          = Build.Variable("AGENT_NAME");
- AssemblyInfo.BuildId          = Build.Variable("BUILD_BUILDID");

- AssemblyInfo.LoadGitMetadata(working_path);

@{
    var commit = AssemblyInfo.DateTimeUtc.ToString("HHmm");
    var build = AssemblyInfo.DateTimeUtc.ToString("MMddyy");

    if (string.IsNullOrEmpty(AssemblyInfo.AssemblyVersion))
    {
        AssemblyInfo.AssemblyVersion = string.IsNullOrEmpty(version) ? "1.0.0" : version;
    }

    if (string.IsNullOrEmpty(AssemblyInfo.CommitId))
    {
        AssemblyInfo.CommitId = commit;
    }

    if (string.IsNullOrEmpty(AssemblyInfo.BuildId))
    {
        AssemblyInfo.BuildId = build;
    }

    AssemblyInfo.FileVersion = AssemblyInfo.AssemblyVersion + '.' + AssemblyInfo.BuildId;

    if (string.IsNullOrEmpty(AssemblyInfo.Branch))
    {
        AssemblyInfo.Branch = "<unknown>";
    }

    if (string.IsNullOrEmpty(AssemblyInfo.InformationalVersion))
    {
        AssemblyInfo.InformationalVersion = AssemblyInfo.AssemblyVersion;
    }
    
    if (string.IsNullOrEmpty(AssemblyInfo.PrereleaseTag))
    {
        var prerelease = "alpha";

        if (AssemblyInfo.Branch.Contains(@"/dev"))
        {
            prerelease = "beta";
        }
        else if (AssemblyInfo.Branch.Contains(@"/master") || AssemblyInfo.Branch.Contains(@"/main"))
        {
            prerelease = "rc";
        }
        else if (AssemblyInfo.Branch.Contains(@"/release"))
        {
            prerelease = null;
        }

        AssemblyInfo.PrereleaseTag = prerelease;
    }

    if (string.IsNullOrEmpty(Build.Variable("BUILD_BUILDNUMBER")) && string.IsNullOrEmpty(Build.Variable("BUILD_SERVER")))
    {
        AssemblyInfo.PrereleaseTag += "-" + build + "-" + commit;
    }

    if (string.IsNullOrEmpty(AssemblyInfo.BuiltOn))
    {
        AssemblyInfo.BuiltOn = Environment.MachineName;
    }

    if (string.IsNullOrEmpty(AssemblyInfo.BuiltBy))
    {
        string user;

        if (Build.TryExecute("git", out user, "config user.email"))
        {
            AssemblyInfo.BuiltBy = user;
        }
        else if (Build.TryExecute("git", out user, "config user.name"))
        {
            AssemblyInfo.BuiltBy = user;
        }
        else
        {
            AssemblyInfo.BuiltBy = Environment.UserName;
        }
    }
}