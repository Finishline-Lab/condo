@{/*

info-collect
    Collects assembly information used to update assembly info files prior to compilation.

base_path='$(CurrentDirectory)'
    The base path in which to locate assembly information (such as from git).

working_path='$(base_path)'
    The working path in which to locate assembly information (such as from git).

*/}

use namespace = 'System'

use import = 'Condo.AssemblyInfo'
use import = 'Condo.Build'

default base_path               = '${ Directory.GetCurrentDirectory() }'
default working_path            = '${ base_path }'

default version                 = ''
default product                 = ''
default company                 = ''
default copyright               = ''
default license                 = ''
default licenseUri              = ''

- AssemblyInfo.AssemblyVersion  = Build.Variable("BUILD_VERSION");
- AssemblyInfo.Branch           = Build.Variable("BUILD_SOURCEBRANCH");
- AssemblyInfo.CommitId         = Build.Variable("BUILD_SOURCEVERSION");
- AssemblyInfo.RepositoryUri    = Build.Variable("BUILD_REPOSITORY_URI");
- AssemblyInfo.BuildUri         = Build.Variable("BUILD_BUILDURI");
- AssemblyInfo.TeamUri          = Build.Variable("SYSTEM_TEAMFOUNDATIONCOLLECTIONURI");
- AssemblyInfo.BuiltBy          = Build.Variable("BUILD_REQUESTEDFOR");
- AssemblyInfo.BuiltOn          = Build.Variable("AGENT_NAME");
- AssemblyInfo.BuildId          = Build.Variable("BUILD_BUILDID");
- AssemblyInfo.Product          = product;
- AssemblyInfo.Company          = company;
- AssemblyInfo.Copyright        = copyright;
- AssemblyInfo.License          = license;
- AssemblyInfo.LicenseUri       = licenseUri;

- AssemblyInfo.LoadGitMetadata(working_path);

@{
    var commit = AssemblyInfo.DateTimeUtc.ToString("HHmm");
    var build = AssemblyInfo.DateTimeUtc.ToString("yyddMM");

    if (string.IsNullOrEmpty(AssemblyInfo.AssemblyVersion))
    {
        AssemblyInfo.AssemblyVersion = string.IsNullOrEmpty(version) ? "1.0.0" : version;
    }

    if (string.IsNullOrEmpty(AssemblyInfo.CommitId))
    {
        AssemblyInfo.CommitId = commit;
    }

    if (string.IsNullOrEmpty(AssemblyInfo.BuildId))
    {
        AssemblyInfo.BuildId = build;
    }

    AssemblyInfo.FileVersion = string.Format("{0}.{1}.{2}.{3}", AssemblyInfo.Version.Major, AssemblyInfo.Version.Minor, AssemblyInfo.BuildId, commit);

    if (string.IsNullOrEmpty(AssemblyInfo.Branch))
    {
        AssemblyInfo.Branch = "<unknown>";
    }

    if (string.IsNullOrEmpty(AssemblyInfo.InformationalVersion))
    {
        AssemblyInfo.InformationalVersion = AssemblyInfo.AssemblyVersion;
    }

    if (string.IsNullOrEmpty(AssemblyInfo.PrereleaseTag))
    {
        var prerelease = "alpha";

        if (AssemblyInfo.Branch.Contains(@"/dev"))
        {
            prerelease = "beta";
        }
        else if (AssemblyInfo.Branch.Contains(@"/master") || AssemblyInfo.Branch.Contains(@"/main"))
        {
            prerelease = "rc";
        }
        else if (AssemblyInfo.Branch.Contains(@"/release"))
        {
            prerelease = null;
        }

        AssemblyInfo.PrereleaseTag = prerelease;
    }

    if (!string.IsNullOrEmpty(AssemblyInfo.PrereleaseTag))
    {
        AssemblyInfo.PrereleaseTag += "-" + AssemblyInfo.BuildId.PadLeft(5, "0"[0]);
    }

    if (string.IsNullOrEmpty(Build.Variable("BUILD_BUILDNUMBER")) && string.IsNullOrEmpty(Build.Variable("BUILD_SERVER")))
    {
        AssemblyInfo.PrereleaseTag += "-" + commit.PadLeft(4, "0"[0]);
    }

    if (string.IsNullOrEmpty(AssemblyInfo.BuiltOn))
    {
        AssemblyInfo.BuiltOn = Environment.MachineName;
    }

    if (string.IsNullOrEmpty(AssemblyInfo.BuiltBy))
    {
        string user;

        if (Build.TryExecute("git", out user, "config user.email"))
        {
            AssemblyInfo.BuiltBy = user;
        }
        else if (Build.TryExecute("git", out user, "config user.name"))
        {
            AssemblyInfo.BuiltBy = user;
        }
        else
        {
            AssemblyInfo.BuiltBy = Environment.UserName;
        }
    }
}

log verbose='-info-collect'
log verbose='--product          : ${ AssemblyInfo.Product }' if='!string.IsNullOrEmpty(AssemblyInfo.Product)'
log verbose='--company          : ${ AssemblyInfo.Company }' if='!string.IsNullOrEmpty(AssemblyInfo.Company)'
log verbose='--copyright        : ${ AssemblyInfo.Copyright }' if='!string.IsNullOrEmpty(AssemblyInfo.Copyright)'
log verbose='--version          : ${ AssemblyInfo.AssemblyVersion }' if='!string.IsNullOrEmpty(AssemblyInfo.AssemblyVersion)'
log verbose='--file version     : ${ AssemblyInfo.FileVersion }' if='!string.IsNullOrEmpty(AssemblyInfo.FileVersion)'
log verbose='--prerelease tag   : ${ AssemblyInfo.PrereleaseTag }' if='!string.IsNullOrEmpty(AssemblyInfo.PrereleaseTag)'
log verbose='--semantic version : ${ AssemblyInfo.InformationalVersion }' if='!string.IsNullOrEmpty(AssemblyInfo.InformationalVersion)'
log verbose='--build ID         : ${ AssemblyInfo.BuildId }' if='!string.IsNullOrEmpty(AssemblyInfo.BuildId)'
log verbose='--commit ID        : ${ AssemblyInfo.CommitId }' if='!string.IsNullOrEmpty(AssemblyInfo.CommitId)'
log verbose='--branch           : ${ AssemblyInfo.Branch }' if='!string.IsNullOrEmpty(AssemblyInfo.Branch)'
log verbose='--repository URI   : ${ AssemblyInfo.RepositoryUri }' if='!string.IsNullOrEmpty(AssemblyInfo.RepositoryUri)'
log verbose='--team URI         : ${ AssemblyInfo.TeamUri }' if='!string.IsNullOrEmpty(AssemblyInfo.TeamUri)'
log verbose='--build URI        : ${ AssemblyInfo.BuildUri }' if='!string.IsNullOrEmpty(AssemblyInfo.BuildUri)'
log verbose='--built by:        : ${ AssemblyInfo.BuiltBy }' if='!string.IsNullOrEmpty(AssemblyInfo.BuiltBy)'
log verbose='--built on:        : ${ AssemblyInfo.BuiltOn }' if='!string.IsNullOrEmpty(AssemblyInfo.BuiltOn)'
log verbose='--build date (UTC) : ${ AssemblyInfo.BuildDateUtc }' if='!string.IsNullOrEmpty(AssemblyInfo.BuildDateUtc)'
log verbose='--license          : ${ AssemblyInfo.License }' if='!string.IsNullOrEmpty(AssemblyInfo.License)'
log verbose='--license URI      : ${ AssemblyInfo.LicenseUri }' if='!string.IsNullOrEmpty(AssemblyInfo.LicenseUri)'