
@{/*

nuget-pack
    Executes a nuget package manager command to pack the specified packages.

nuget_pack_options='' (Environment Variable: nuget_nuget_pack_options)
    Additional options to include when executing the nuget command line tool for the pack operation.

nuget_pack_path='$(working_path)'
    The path to the nuget specification or project that should be packed or the directory in which 
    a nuget specification or project should be found.

nuget_pack_version='$(AssemblyInfo.InformationalVersion)'
    The version used to override the version defined in a nuget specification.

base_path='$(CurrentDirectory)'
    The base path in which to execute the nuget command line tool.

working_path='$(base_path)'
    The working path in which to execute the nuget command line tool.

*/}

use namespace = 'System'
use namespace = 'System.IO'
use namespace = 'System.Linq'
use namespace = 'System.Threading.Tasks'

default base_path           = '${ Directory.GetCurrentDirectory() }'
default working_path        = '${ base_path }'
default nuget_pack_path     = '${ working_path }'

default target_path         = '${ Path.Combine(base_path, "artifacts") }'
default target_package_path = '${ Path.Combine(target_path, "packages") }'

info-collect once='info-collect'

default nuget_pack_version  = '${ AssemblyInfo.InformationalVersion }'
default nuget_pack_options  = '${ Build.Variable("NUGET_PACK_OPTIONS") }'

log verbose='-nuget-pack'
log verbose='--options      : ${ nuget_pack_options }' if='!string.IsNullOrEmpty(nuget_pack_options)'
log verbose='--path         : ${ nuget_pack_path }' if='!string.IsNullOrEmpty(nuget_pack_path)'
log verbose='--version      : ${ nuget_pack_version }' if='!string.IsNullOrEmpty(nuget_pack_version)'

@{
    if (!string.IsNullOrEmpty(nuget_pack_version))
    {
        nuget_pack_options += " -Version " + nuget_pack_version;
    }

    if (!string.IsNullOrEmpty(target_package_path))
    {
        nuget_pack_options += " -OutputDirectory \"" + target_package_path + "\"";

        Directory.CreateDirectory(target_package_path);
    }

    if (Directory.Exists(nuget_pack_path))
    {
        var nuget_pack_paths = Directory.EnumerateFiles(nuget_pack_path, "*.nuspec")
            .Union(Directory.EnumerateFiles(nuget_pack_path, "*.??proj"))
            .Distinct();

        Parallel.ForEach(nuget_pack_paths, path => Pack("pack \"" + path + "\"", nuget_pack_options, nuget_pack_path));
    }
    else
    {
        if (!File.Exists(nuget_pack_path))
        {
            throw new ArgumentException("nuget-pack: the specified path for the specification or project was not found.", "nuget_pack_path");
        }

        Pack("pack \"" + nuget_pack_path + "\"", nuget_pack_options, nuget_pack_path);
    }
}

macro name='Pack' nuget_args='string' nuget_options='string' nuget_path='string'
    - nuget_options = nuget_options.EndsWith("proj") ? nuget_options + " -Symbols" : nuget_options;
    nuget