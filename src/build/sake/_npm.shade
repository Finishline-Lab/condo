@{/*

npm
    Executes a node package manager (npm) command.

npm_args=''
    Required. The arguments to pass to the npm command.

npm_options='' (Environment Variable: NPM_OPTIONS)
    Additional options to use when executing the npm command.

npm_path='$(working_path)'
    The path in which to execute the npm command.

working_path='$(base_path)'
    The working path in which to execute the npm command.

base_path='$(CurrentDirectory)'
    The base path in which to execute the npm command.

*/}

use namespace = 'System'

use import = 'Condo.Build'

default base_path           = '${ Directory.GetCurrentDirectory() }'
default working_path        = '${ base_path }'

default npm_args            = ''
default npm_options         = '${ Build.Get("NPM_OPTIONS") }'
default npm_path            = '${ working_path }'
default node_download_path  = '${ Path.Combine(base_path, "bin", "nodejs") }'

default Quiet               = '${ false }'

@{
    if (string.IsNullOrEmpty(npm_args))
    {
        throw new ArgumentException("npm: cannot be executed without arguments.", "npm_args");
    }
}

node-download once='node-download'

log verbose='-npm'
log verbose='--arguments    : ${ npm_args }'
log verbose='--options      : ${ npm_options }' if='!string.IsNullOrEmpty(npm_options)'
log verbose='--path         : ${ npm_path }'

@{
    if (Quiet)
    {
        npm_options += " --quiet";
    }

    npm_options = npm_options.Trim();
}

var npm_cmd = '${ Path.Combine(node_download_path, "npm.cmd") }'
- npm_cmd = !Build.Unix && File.Exists(npm_cmd) ? ("\"" + npm_cmd + "\"") : "npm";

exec exec_cmd='${ npm_cmd }' exec_args='${ npm_options } ${ npm_args }' exec_path='${ npm_path }' exec_quiet='${ false }'