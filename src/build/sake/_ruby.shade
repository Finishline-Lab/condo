@{/*

ruby
    Executes the ruby command line tool.

ruby_args=''
    Required. The arguments used to execute the command.

ruby_options='-e'
    The options used to execute the command.

ruby_path='$(working_path)'
    The path in which to execute the command.

base_path='$(CurrentDirectory)'
    The base path in which to execute the nuget package manager command line tool.

working_path='$(base_path)'
    The working path in which to execute the nuget package manager command line tool.

ruby_wait='true'
    A value indicating whether or not to wait for exit.

ruby_quiet='$(Build.Log.Quiet)'
    A value indicating whether or not to avoid printing output.

*/}

default ruby_args       = ''
default ruby_options    = ''

default base_path       = '${ Directory.GetCurrentDirectory() }'
default working_path    = '${ base_path }'
default ruby_path       = '${ working_path }'
default ruby_wait       = '${ true }'
default ruby_quiet      = '${ Build.Log.Quiet }'

log log_header='ruby'
log log_line='-'

var ruby_version        = ''
var ruby_installed      = '${ Build.TryExecute("ruby", out ruby_version, "--version") }'

@{
    if (!ruby_installed)
    {
        throw new InvalidOperationException("ruby: ruby was not found on the system. Please install ruby and try again.");
    }
}

log log_name='arguments'    log_value='${ ruby_args }'
log log_name='options'      log_value='${ ruby_options }'
log log_name='path'         log_value='${ ruby_path }'
log log_name='wait'         log_value='${ ruby_wait }'
log log_name='quiet'        log_value='${ ruby_quiet }'

exec exec_cmd='ruby' exec_args='${ ruby_options } "${ ruby_args }"' exec_path='${ ruby_path }'