use namespace="System.Diagnostics"
use namespace="System.IO"

default working_path = '${ Directory.GetCurrentDirectory() }'

default assembly = ''
default hash = ''

@{
    if (string.IsNullOrEmpty(assembly))
    {
        Log.Warn("verify-hash: no assembly was specified.");
        
        return;
    }

    Log.Info(string.Format("verify-hash: verifying authenticode signature of {0}", assembly));

    var signPaths = new[]
        {
            @"C:\Program Files (x86)\Windows Kits\10\bin\x86\signtool.exe", 
            @"C:\Program Files (x86)\Windows Kits\8.1\bin\x86\signtool.exe", 
            @"C:\Program Files\Windows Kits\10\bin\x86\signtool.exe",
            @"C:\Program Files\Windows Kits\8.1\bin\x86\signtool.exe"
        };

    var signtool = signPaths.FirstOrDefault(File.Exists);

    if (string.IsNullOrEmpty(signtool))
    {
        throw new Exception("signtool.exe was not located on the machine. Please install Visual Studio 2013 or greater.");
    }

    var info = new ProcessStartInfo
        {
            UseShellExecute = false,
            WorkingDirectory = working_path,
            FileName = signtool,
            RedirectStandardOutput = true,
            Arguments = "verify /pa /v \"" + assembly + "\""
        };

    var process = Process.Start(info);
    var output = process.StandardOutput.ReadToEnd();

    process.WaitForExit();

    if (process.ExitCode != 0)
    {
        File.Delete(assembly);

        throw new Exception(string.Format("The signature verification for {0} failed:{1}{2}", assembly, Environment.NewLine, output));
    }

    if (!string.IsNullOrEmpty(hash))
    {
        var lines = output.Split(new [] { Environment.NewLine }, StringSplitOptions.None);
        var hash_line = lines[3];
        var actual = hash_line.Substring(hash_line.IndexOf(":") + 1).Trim();

        if (!string.Equals(hash, actual, StringComparison.Ordinal))
        {
            File.Delete(assembly);

            throw new Exception(string.Format("The hash comparison for {0} failed: expected '{1}', actual '{2}'", assembly, hash, actual));
        }
    }

    Log.Info("verify-hash: authenticode signature successfully verified.");
}