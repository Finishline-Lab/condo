@{/*

node
    Executes a node package manager command.

node_args=''
    Required. The arguments to pass to the node command line tool.

node_path='$(base_path)'
    The path in which to execute node.

base_path='$(CurrentDirectory)'
    The base path of the project.

node_wait='true'
    A value indicating whether or not to wait for exit.

node_quiet='$(Build.Log.Quiet)'
    A value indicating whether or not to avoid printing output.

*/}

use namespace = 'System'
use namespace = 'System.IO'

use import = 'Condo.Build'

default base_path           = '${ Directory.GetCurrentDirectory() }'

default node_args           = ''
default node_path           = '${ base_path }'
default node_wait           = '${ true }'
default node_quiet          = '${ Build.Log.Quiet }'

node-download once='node-download'

log log_header='node'
log log_line='-'

var node_cmd                = '${ Build.GetPath("node") }'

@{
    if (string.IsNullOrEmpty(node_args))
    {
        throw new ArgumentException("node: cannot be executed without arguments.", "node_args");
    }
}

log log_name='cli'          log_value='${ node_cmd.Path }'
log log_name='arguments'    log_value='${ node_args }'
log log_name='path'         log_value='${ node_path }'
log log_name='wait'         log_value='${ node_wait }'
log log_name='quiet'        log_value='${ node_quiet }'
log log_line='-'

exec exec_cmd='${ node_cmd.Path }' exec_args='${ node_args }' exec_path='${ node_path }' exec_wait='${ node_wait }' exec_quiet='${ node_quiet }'