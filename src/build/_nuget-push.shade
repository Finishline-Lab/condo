
@{/*

nuget-push
    Executes a nuget pushage manager command to push all available pushages.

nuget_push_args=''
    Required. The path to the nuget package that should be pushed to the feed.

nuget_push_feed='' (Environment Variable: NUGET_PUSH_FEED)
    The feed to which nuget should push packages.

    NOTE: This can be a list of feeds that are separated by a semi-colon (;).

nuget_push_apikey='' (Environment Variable: NUGET_PUSH_APIKEY)
    The API key to use when pushing packages to the nuget feed.

nuget_push_options='' (Environment Variable: NUGET_PUSH_OPTIONS)
    Additional options to include when executing the nuget command line tool for the push operation.

nuget_config_path='$(nuget_download_path)/nuget.config'
    The path to the nuget configuration file to use when executing nuget commands.

nuget_push_path='$(working_path)'
    The path in which to execute the nuget command line tool.

base_path='$(CurrentDirectory)'
    The base path in which to execute the nuget command line tool.

working_path='$(base_path)'
    The working path in which to execute the nuget command line tool.

nuget_download_path='$(base_path)/.nuget'
    The path in which to install nuget.

*/}

use namespace = 'System'
use namespace = 'System.IO'

use import = 'Condo.Build'

default base_path               = '${ Directory.GetCurrentDirectory() }'
default working_path            = '${ base_path }'

default nuget_push_path         = '${ working_path }'
default nuget_push_feed         = '${ Build.Get("NUGET_PUSH_FEED") }'
default nuget_push_apikey       = '${ Build.Get("NUGET_PUSH_APIKEY") }'
default nuget_push_args         = ''
default nuget_push_options      = '${ Build.Get("NUGET_PUSH_OPTIONS") }'
default nuget_push_retries      = '${ 3 }' type='int'
default nuget_download_path     = '${ Path.Combine(base_path, ".nuget") }'
default nuget_root_config_path  = '${ Path.Combine(base_path, "nuget.config" }'
default nuget_config_path       = '${ Path.Combine(nuget_download_path, "nuget.config") }'

log log_header='nuget-push'
log log_line='-'

log log_name='api key'    log_value='${ nuget_push_apikey }'    log_secure='${ true }'
log log_name='push feed'  log_value='${ nuget_push_feed }'
log log_name='arguments'  log_value='${ nuget_push_args }'
log log_name='options'    log_value='${ nuget_push_options }'
log log_name='retries'    log_value='${ nuget_push_retries }'

var nuget_push_pr               = '${ Build.PullRequest }' type='bool'

@{
    if (File.Exists(nuget_config_path))
    {
        nuget_push_options = (nuget_push_options + " -ConfigFile " + nuget_config_path).Trim();
    }
    else if (File.Exists(nuget_root_config_path))
    {
        nuget_push_options = (nuget_push_options + " -ConfigFile " + nuget_root_config_path).Trim();
    }
    else
    {
        nuget_config_path = "";
    }
}

log log_name='config path'  log_value='${ nuget_config_path }'
log log_name='root config path' log_value='${ nuget_root_config_path }'
log log_line='-'

@{
    if (string.IsNullOrEmpty(nuget_push_args))
    {
        throw new ArgumentException("nuget-push: arguments must be specified.", "nuget_push_args");
    }

    if (!string.IsNullOrEmpty(nuget_push_feed))
    {
        var nuget_push_feeds = nuget_push_feed.Split(";"[0]);

        if (nuget_push_pr)
        {
            nuget_push_pr = nuget_push_feeds.Any(feed => feed.StartsWith("http"));
        }

        foreach (var feed in nuget_push_feeds)
        {
            if (!feed.StartsWith("http"))
            {
                Directory.CreateDirectory(feed);
            }
        }

        nuget_push_options += ' -Source \"' + nuget_push_feed + "\"";
    }
}

nuget nuget_args='setApiKey ${ nuget_push_apikey }' nuget_options='${ nuget_push_options }' nuget_path='${ nuget_push_path }' nuget_quiet='${ true }' nuget_secure='${ true }' nuget_retries='${ nuget_push_retries }' if='!string.IsNullOrEmpty(nuget_push_apikey) && !nuget_push_pr'
nuget nuget_args='push "${ nuget_push_args }"' nuget_options='${ nuget_push_options }' nuget_path='${ nuget_push_path }' nuget_retries='${ nuget_push_retries }' if='!nuget_push_pr'