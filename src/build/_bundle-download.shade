@{/*

bundle-download
    Downloads and installs bundler if it is not already installed.

bundle_download_path='$(base_path)'
    The path in which to download bundler.

base_path='$(CurrentDirectory)'
    The base path in which to download bundler.

*/}

use import = 'Condo.Build'

default base_path                = '${ Directory.GetCurrentDirectory() }'

default bundle_download_path     = '${ base_path }'

var bundle_install               = 'bundle'

var bundle_version               = ''
var bundle_installed             = '${ Build.TryExecute("bundle", out bundle_version, "--version") }' type='bool'

gem-install gem_install_name='bundler' if='!bundle_installed' once='bundler-install'

@{
    Build.Log.Header("bundle-download");

    // determine if bundler was already installed
    if (!bundle_installed)
    {
        // get the version
        bundle_installed = Build.TryExecute("bundle", out bundle_version, "--version");
    }

    Build.Log.Argument("path", bundle_install);
    Build.Log.Argument("version", bundle_version);
    Build.Log.Header();
}

- Build.SetPath("bundle", bundle_install, true);