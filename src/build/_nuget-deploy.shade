@{/*

nuget-push
    Executes a nuget push manager command to push all available packages.

nuget_deploy_package=''
    Required. The path to the nuget package that should be pushed to the feed.

nuget_deploy_feed='' (Environment Variable: NUGET_DEPLOY_FEED)
    The feed to which nuget should push packages.

    NOTE: This can be a list of feeds that are separated by a semi-colon (;).

_apikey='' (Environment Variable: _APIKEY)
    The API key to use when pushing packages to the nuget feed.

nuget_deploy_options='' (Environment Variable: NUGET_DEPLOY_OPTIONS)
    Additional options to include when executing the nuget command line tool for the push operation.

nuget_config_path='$(nuget_download_path)/nuget.config'
    The path to the nuget configuration file to use when executing nuget commands.

nuget_deploy_path='$(working_path)'
    The path in which to execute the nuget command line tool.

base_path='$(CurrentDirectory)'
    The base path in which to execute the nuget command line tool.

working_path='$(base_path)'
    The working path in which to execute the nuget command line tool.

nuget_download_path='$(base_path)/.nuget'
    The path in which to install nuget.

*/}

use namespace = 'System'
use namespace = 'System.IO'

use import = 'Condo.Build'

default base_path               = '${ Directory.GetCurrentDirectory() }'
default working_path            = '${ base_path }'

default nuget_deploy_path       = '${ working_path }'
default nuget_deploy_feed       = '${ Build.Get("NUGET_DEPLOY_FEED") }'
default nuget_deploy_apikey     = '${ Build.Get("NUGET_DEPLOY_APIKEY") }'
default nuget_deploy_package    = ''
default nuget_deploy_options    = '${ Build.Get("NUGET_DEPLOY_OPTIONS") }'
default nuget_deploy_retries    = '${ 3 }' type='int'
default nuget_download_path     = '${ Path.Combine(base_path, ".nuget") }'

default nuget_root_config_path  = '${ Path.Combine(base_path, "nuget.config" }'
default nuget_config_path       = '${ Path.Combine(nuget_download_path, "nuget.config") }'

@{
    Build.Log.Header("nuget-push");
    Build.Log.Argument("api key", nuget_deploy_apikey, true);
    Build.Log.Argument("push feed", nuget_deploy_feed);
    Build.Log.Argument("arguments", nuget_deploy_package);
    Build.Log.Argument("options", nuget_deploy_options);
    Build.Log.Argument("retries", nuget_deploy_retries);

    var nuget_deploy_pr         = Build.PullRequest;

    if (File.Exists(nuget_config_path))
    {
        nuget_deploy_options = (nuget_deploy_options + " -ConfigFile " + nuget_config_path).Trim();
    }
    else if (File.Exists(nuget_root_config_path))
    {
        nuget_deploy_options = (nuget_deploy_options + " -ConfigFile " + nuget_root_config_path).Trim();
    }
    else
    {
        nuget_config_path = "";
    }

    Build.Log.Argument("config path", nuget_config_path);
    Build.Log.Argument("root config path", nuget_root_config_path);
    Build.Log.Header();

    if (string.IsNullOrEmpty(nuget_deploy_package))
    {
        throw new ArgumentException("nuget-push: arguments must be specified.", "nuget_deploy_package");
    }

    if (!string.IsNullOrEmpty(nuget_deploy_feed))
    {
        var nuget_deploy_feeds = nuget_deploy_feed.Split(";"[0]);

        if (nuget_deploy_pr)
        {
            nuget_deploy_pr = nuget_deploy_feeds.Any(feed => feed.StartsWith("http"));
        }

        foreach (var feed in nuget_deploy_feeds)
        {
            if (!feed.StartsWith("http"))
            {
                Directory.CreateDirectory(feed);
            }
        }

        nuget_deploy_options += ' -Source \"' + nuget_deploy_feed + "\"";
    }

    if (nuget_deploy_pr)
    {
        Build.Log.Warn("nuget-push: packages will not be pushed for pull requests.");
    }
}

nuget nuget_args='setApiKey ${ nuget_deploy_apikey }' nuget_options='${ nuget_deploy_options }' nuget_path='${ nuget_deploy_path }' nuget_quiet='${ true }' nuget_secure='${ true }' nuget_retries='${ nuget_deploy_retries }' if='!string.IsNullOrEmpty(nuget_deploy_apikey) && !nuget_deploy_pr'
nuget nuget_args='push "${ nuget_deploy_package }"' nuget_options='${ nuget_deploy_options }' nuget_path='${ nuget_deploy_path }' nuget_retries='${ nuget_deploy_retries }' if='!nuget_deploy_pr'